### YamlMime:ManagedReference
items:
- uid: BK.RuntimeDebugAction.ReorderableList`1
  commentId: T:BK.RuntimeDebugAction.ReorderableList`1
  id: ReorderableList`1
  parent: BK.RuntimeDebugAction
  children:
  - BK.RuntimeDebugAction.ReorderableList`1.Count
  - BK.RuntimeDebugAction.ReorderableList`1.GetEnumerator
  - BK.RuntimeDebugAction.ReorderableList`1.Item(System.Int32)
  - BK.RuntimeDebugAction.ReorderableList`1.System#Collections#IEnumerable#GetEnumerator
  - BK.RuntimeDebugAction.ReorderableList`1.values
  langs:
  - csharp
  - vb
  name: ReorderableList<U>
  nameWithType: ReorderableList<U>
  fullName: BK.RuntimeDebugAction.ReorderableList<U>
  type: Class
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: ReorderableList
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 17
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RuntimeDebugAction
  summary: "\nWrapper class for our custom reorderable drawer\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class ReorderableList<U> : ReorderableBase, IEnumerable<U>, IEnumerable
    typeParameters:
    - id: U
      description: List Type
    content.vb: >-
      <Serializable>

      Public Class ReorderableList(Of U)
          Inherits ReorderableBase
          Implements IEnumerable(Of U), IEnumerable
  inheritance:
  - System.Object
  - BK.RuntimeDebugAction.ReorderableBase
  derivedClasses:
  - BK.RuntimeDebugAction.RDFlagsList
  implements:
  - System.Collections.Generic.IEnumerable{{U}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: ReorderableList(Of U)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: BK.RuntimeDebugAction.ReorderableList(Of U)
  name.vb: ReorderableList(Of U)
- uid: BK.RuntimeDebugAction.ReorderableList`1.values
  commentId: F:BK.RuntimeDebugAction.ReorderableList`1.values
  id: values
  parent: BK.RuntimeDebugAction.ReorderableList`1
  langs:
  - csharp
  - vb
  name: values
  nameWithType: ReorderableList<U>.values
  fullName: BK.RuntimeDebugAction.ReorderableList<U>.values
  type: Field
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: values
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 20
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RuntimeDebugAction
  syntax:
    content: public List<U> values
    return:
      type: System.Collections.Generic.List{{U}}
    content.vb: Public values As List(Of U)
  nameWithType.vb: ReorderableList(Of U).values
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BK.RuntimeDebugAction.ReorderableList(Of U).values
- uid: BK.RuntimeDebugAction.ReorderableList`1.Item(System.Int32)
  commentId: P:BK.RuntimeDebugAction.ReorderableList`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: BK.RuntimeDebugAction.ReorderableList`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ReorderableList<U>.Item[Int32]
  fullName: BK.RuntimeDebugAction.ReorderableList<U>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: this[]
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 22
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RuntimeDebugAction
  syntax:
    content: public U this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{U}'
    content.vb: Public Property Item(index As Integer) As U
  overload: BK.RuntimeDebugAction.ReorderableList`1.Item*
  nameWithType.vb: ReorderableList(Of U).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: BK.RuntimeDebugAction.ReorderableList(Of U).Item(System.Int32)
  name.vb: Item(Int32)
- uid: BK.RuntimeDebugAction.ReorderableList`1.Count
  commentId: P:BK.RuntimeDebugAction.ReorderableList`1.Count
  id: Count
  parent: BK.RuntimeDebugAction.ReorderableList`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ReorderableList<U>.Count
  fullName: BK.RuntimeDebugAction.ReorderableList<U>.Count
  type: Property
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: Count
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 24
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RuntimeDebugAction
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: BK.RuntimeDebugAction.ReorderableList`1.Count*
  nameWithType.vb: ReorderableList(Of U).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BK.RuntimeDebugAction.ReorderableList(Of U).Count
- uid: BK.RuntimeDebugAction.ReorderableList`1.GetEnumerator
  commentId: M:BK.RuntimeDebugAction.ReorderableList`1.GetEnumerator
  id: GetEnumerator
  parent: BK.RuntimeDebugAction.ReorderableList`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ReorderableList<U>.GetEnumerator()
  fullName: BK.RuntimeDebugAction.ReorderableList<U>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: GetEnumerator
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 26
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RuntimeDebugAction
  syntax:
    content: public IEnumerator<U> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{U}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of U)
  overload: BK.RuntimeDebugAction.ReorderableList`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{U}}.GetEnumerator
  nameWithType.vb: ReorderableList(Of U).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BK.RuntimeDebugAction.ReorderableList(Of U).GetEnumerator()
- uid: BK.RuntimeDebugAction.ReorderableList`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:BK.RuntimeDebugAction.ReorderableList`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: BK.RuntimeDebugAction.ReorderableList`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ReorderableList<U>.IEnumerable.GetEnumerator()
  fullName: BK.RuntimeDebugAction.ReorderableList<U>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 28
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RuntimeDebugAction
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: BK.RuntimeDebugAction.ReorderableList`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ReorderableList(Of U).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: BK.RuntimeDebugAction.ReorderableList(Of U).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: BK.RuntimeDebugAction
  commentId: N:BK.RuntimeDebugAction
  name: BK.RuntimeDebugAction
  nameWithType: BK.RuntimeDebugAction
  fullName: BK.RuntimeDebugAction
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BK.RuntimeDebugAction.ReorderableBase
  commentId: T:BK.RuntimeDebugAction.ReorderableBase
  parent: BK.RuntimeDebugAction
  name: ReorderableBase
  nameWithType: ReorderableBase
  fullName: BK.RuntimeDebugAction.ReorderableBase
- uid: System.Collections.Generic.IEnumerable{{U}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<U>
  nameWithType: IEnumerable<U>
  fullName: System.Collections.Generic.IEnumerable<U>
  nameWithType.vb: IEnumerable(Of U)
  fullName.vb: System.Collections.Generic.IEnumerable(Of U)
  name.vb: IEnumerable(Of U)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.List{{U}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<U>
  nameWithType: List<U>
  fullName: System.Collections.Generic.List<U>
  nameWithType.vb: List(Of U)
  fullName.vb: System.Collections.Generic.List(Of U)
  name.vb: List(Of U)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BK.RuntimeDebugAction.ReorderableList`1.Item*
  commentId: Overload:BK.RuntimeDebugAction.ReorderableList`1.Item
  name: Item
  nameWithType: ReorderableList<U>.Item
  fullName: BK.RuntimeDebugAction.ReorderableList<U>.Item
  nameWithType.vb: ReorderableList(Of U).Item
  fullName.vb: BK.RuntimeDebugAction.ReorderableList(Of U).Item
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{U}'
  commentId: '!:U'
  definition: U
  name: U
  nameWithType: U
  fullName: U
- uid: U
  commentId: '!:U'
  name: U
  nameWithType: U
  fullName: U
- uid: BK.RuntimeDebugAction.ReorderableList`1.Count*
  commentId: Overload:BK.RuntimeDebugAction.ReorderableList`1.Count
  name: Count
  nameWithType: ReorderableList<U>.Count
  fullName: BK.RuntimeDebugAction.ReorderableList<U>.Count
  nameWithType.vb: ReorderableList(Of U).Count
  fullName.vb: BK.RuntimeDebugAction.ReorderableList(Of U).Count
- uid: BK.RuntimeDebugAction.ReorderableList`1.GetEnumerator*
  commentId: Overload:BK.RuntimeDebugAction.ReorderableList`1.GetEnumerator
  name: GetEnumerator
  nameWithType: ReorderableList<U>.GetEnumerator
  fullName: BK.RuntimeDebugAction.ReorderableList<U>.GetEnumerator
  nameWithType.vb: ReorderableList(Of U).GetEnumerator
  fullName.vb: BK.RuntimeDebugAction.ReorderableList(Of U).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{U}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{U}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<U>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<U>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of U).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of U).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<U>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<U>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of U).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of U).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{U}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<U>
  nameWithType: IEnumerator<U>
  fullName: System.Collections.Generic.IEnumerator<U>
  nameWithType.vb: IEnumerator(Of U)
  fullName.vb: System.Collections.Generic.IEnumerator(Of U)
  name.vb: IEnumerator(Of U)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BK.RuntimeDebugAction.ReorderableList`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:BK.RuntimeDebugAction.ReorderableList`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ReorderableList<U>.IEnumerable.GetEnumerator
  fullName: BK.RuntimeDebugAction.ReorderableList<U>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ReorderableList(Of U).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: BK.RuntimeDebugAction.ReorderableList(Of U).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
