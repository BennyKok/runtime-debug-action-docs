### YamlMime:ManagedReference
items:
- uid: BK.RDAction.Utils.ReorderableList`1
  commentId: T:BK.RDAction.Utils.ReorderableList`1
  id: ReorderableList`1
  parent: BK.RDAction.Utils
  children:
  - BK.RDAction.Utils.ReorderableList`1.Count
  - BK.RDAction.Utils.ReorderableList`1.GetEnumerator
  - BK.RDAction.Utils.ReorderableList`1.Item(System.Int32)
  - BK.RDAction.Utils.ReorderableList`1.values
  langs:
  - csharp
  - vb
  name: ReorderableList<U>
  nameWithType: ReorderableList<U>
  fullName: BK.RDAction.Utils.ReorderableList<U>
  type: Class
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: ReorderableList
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 17
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RDAction.Utils
  summary: "\nWrapper class for our custom reorderable drawer\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class ReorderableList<U> : ReorderableBase, IEnumerable<U>, IEnumerable
    typeParameters:
    - id: U
      description: List Type
    content.vb: >-
      <Serializable>

      Public Class ReorderableList(Of U)
          Inherits ReorderableBase
          Implements IEnumerable(Of U), IEnumerable
  inheritance:
  - System.Object
  - BK.RDAction.Utils.ReorderableBase
  derivedClasses:
  - BK.RDAction.Data.RDFlagsList
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: ReorderableList(Of U)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: BK.RDAction.Utils.ReorderableList(Of U)
  name.vb: ReorderableList(Of U)
- uid: BK.RDAction.Utils.ReorderableList`1.values
  commentId: F:BK.RDAction.Utils.ReorderableList`1.values
  id: values
  parent: BK.RDAction.Utils.ReorderableList`1
  langs:
  - csharp
  - vb
  name: values
  nameWithType: ReorderableList<U>.values
  fullName: BK.RDAction.Utils.ReorderableList<U>.values
  type: Field
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: values
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 20
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RDAction.Utils
  syntax:
    content: public List<U> values
    return:
      type: System.Collections.Generic.List{{U}}
    content.vb: Public values As List(Of U)
  nameWithType.vb: ReorderableList(Of U).values
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BK.RDAction.Utils.ReorderableList(Of U).values
- uid: BK.RDAction.Utils.ReorderableList`1.Item(System.Int32)
  commentId: P:BK.RDAction.Utils.ReorderableList`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: BK.RDAction.Utils.ReorderableList`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ReorderableList<U>.Item[Int32]
  fullName: BK.RDAction.Utils.ReorderableList<U>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: this[]
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 22
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RDAction.Utils
  syntax:
    content: public U this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{U}'
    content.vb: Public Property Item(index As Integer) As U
  overload: BK.RDAction.Utils.ReorderableList`1.Item*
  nameWithType.vb: ReorderableList(Of U).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: BK.RDAction.Utils.ReorderableList(Of U).Item(System.Int32)
  name.vb: Item(Int32)
- uid: BK.RDAction.Utils.ReorderableList`1.Count
  commentId: P:BK.RDAction.Utils.ReorderableList`1.Count
  id: Count
  parent: BK.RDAction.Utils.ReorderableList`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ReorderableList<U>.Count
  fullName: BK.RDAction.Utils.ReorderableList<U>.Count
  type: Property
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: Count
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 24
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RDAction.Utils
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: BK.RDAction.Utils.ReorderableList`1.Count*
  nameWithType.vb: ReorderableList(Of U).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: BK.RDAction.Utils.ReorderableList(Of U).Count
- uid: BK.RDAction.Utils.ReorderableList`1.GetEnumerator
  commentId: M:BK.RDAction.Utils.ReorderableList`1.GetEnumerator
  id: GetEnumerator
  parent: BK.RDAction.Utils.ReorderableList`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ReorderableList<U>.GetEnumerator()
  fullName: BK.RDAction.Utils.ReorderableList<U>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Runtime/Utils/AttributeUtils.cs
      branch: master
      repo: https://gitlab.com/BennyKok/unity-runtime-debug-action.git
    id: GetEnumerator
    path: ../Assets/Plugins/Runtime Debug Action/Runtime/Utils/AttributeUtils.cs
    startLine: 26
  assemblies:
  - com.bennykok.runtime-debug-action
  namespace: BK.RDAction.Utils
  syntax:
    content: public IEnumerator<U> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{U}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of U)
  overload: BK.RDAction.Utils.ReorderableList`1.GetEnumerator*
  nameWithType.vb: ReorderableList(Of U).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BK.RDAction.Utils.ReorderableList(Of U).GetEnumerator()
references:
- uid: BK.RDAction.Utils
  commentId: N:BK.RDAction.Utils
  name: BK.RDAction.Utils
  nameWithType: BK.RDAction.Utils
  fullName: BK.RDAction.Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: BK.RDAction.Utils.ReorderableBase
  commentId: T:BK.RDAction.Utils.ReorderableBase
  parent: BK.RDAction.Utils
  name: ReorderableBase
  nameWithType: ReorderableBase
  fullName: BK.RDAction.Utils.ReorderableBase
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{{U}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<U>
  nameWithType: List<U>
  fullName: System.Collections.Generic.List<U>
  nameWithType.vb: List(Of U)
  fullName.vb: System.Collections.Generic.List(Of U)
  name.vb: List(Of U)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: BK.RDAction.Utils.ReorderableList`1.Item*
  commentId: Overload:BK.RDAction.Utils.ReorderableList`1.Item
  name: Item
  nameWithType: ReorderableList<U>.Item
  fullName: BK.RDAction.Utils.ReorderableList<U>.Item
  nameWithType.vb: ReorderableList(Of U).Item
  fullName.vb: BK.RDAction.Utils.ReorderableList(Of U).Item
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{U}'
  commentId: '!:U'
  definition: U
  name: U
  nameWithType: U
  fullName: U
- uid: U
  commentId: '!:U'
  name: U
  nameWithType: U
  fullName: U
- uid: BK.RDAction.Utils.ReorderableList`1.Count*
  commentId: Overload:BK.RDAction.Utils.ReorderableList`1.Count
  name: Count
  nameWithType: ReorderableList<U>.Count
  fullName: BK.RDAction.Utils.ReorderableList<U>.Count
  nameWithType.vb: ReorderableList(Of U).Count
  fullName.vb: BK.RDAction.Utils.ReorderableList(Of U).Count
- uid: BK.RDAction.Utils.ReorderableList`1.GetEnumerator*
  commentId: Overload:BK.RDAction.Utils.ReorderableList`1.GetEnumerator
  name: GetEnumerator
  nameWithType: ReorderableList<U>.GetEnumerator
  fullName: BK.RDAction.Utils.ReorderableList<U>.GetEnumerator
  nameWithType.vb: ReorderableList(Of U).GetEnumerator
  fullName.vb: BK.RDAction.Utils.ReorderableList(Of U).GetEnumerator
- uid: System.Collections.Generic.IEnumerator{{U}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<U>
  nameWithType: IEnumerator<U>
  fullName: System.Collections.Generic.IEnumerator<U>
  nameWithType.vb: IEnumerator(Of U)
  fullName.vb: System.Collections.Generic.IEnumerator(Of U)
  name.vb: IEnumerator(Of U)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
